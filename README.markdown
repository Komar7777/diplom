# README для проекта ВКР: Прогнозирование неисправности компьютерных компонентов

## Описание проекта

Данный проект представляет собой веб-приложение, разработанное в рамках **выпускной квалификационной работы (ВКР)** на тему _Прогнозирование неисправности компьютерных компонентов методами машинного обучения_. **Автор**: Комаров Даниил Иванович.

Приложение предназначено для:
- Анализа данных о состоянии компьютерных компонентов.
- Обучения моделей машинного обучения для прогнозирования неисправностей.
- Визуализации результатов анализа и производительности моделей.
- Генерации отчетов в формате LaTeX/PDF.
- Выполнения предсказаний на основе введенных данных.

Проект использует датасет `POLOMKA.csv` или синтетические данные, реализует множество алгоритмов машинного обучения и предоставляет пользователю интерактивный интерфейс через библиотеку *Streamlit*.

## Основные возможности

- **Загрузка данных**: Поддержка загрузки датасета из локального файла или по URL с обработкой различных кодировок.
- **Генерация синтетических данных**: Создание тестовых данных для отладки и стресс-тестирования.
- **Предобработка данных**: Кодирование категориальных переменных, нормализация, удаление выбросов с использованием метода межквартильного размаха.
- **Анализ данных**: Визуализация корреляций, распределений признаков, box plots, матрицы рассеяния и 3D-графиков.
- **Обучение моделей**: Реализованы алгоритмы:
  - Random Forest
  - Gradient Boosting
  - Многослойный перцептрон (MLP)
  - Метод опорных векторов (SVM)
  - K ближайших соседей (KNN)
  - Ансамблевая модель стэкинга
- **Подбор гиперпараметров**: Автоматический подбор гиперпараметров с помощью `GridSearchCV`.
- **Подбор признаков**: Использование алгоритма Boruta для выбора значимых признаков.
- **Оценка моделей**: Расчет метрик (Accuracy, Precision, Recall, F1, Log Loss, ROC-AUC), построение матриц ошибок и ROC-кривых.
- **Интерпретация моделей**: Анализ SHAP-значений для понимания влияния признаков.
- **Кросс-валидация**: Проверка устойчивости моделей на разных фолдах.
- **Стресс-тестирование**: Тестирование моделей на больших синтетических наборах данных.
- **Тестирование подмножеств признаков**: Оценка производительности моделей на различных комбинациях признаков.
- **Анализ гиперпараметров**: Исследование чувствительности моделей к изменению гиперпараметров.
- **Генерация отчетов**: Создание PDF-отчетов с результатами в формате LaTeX.
- **Юнит-тестирование**: Автоматизированные тесты для проверки функциональности.

## Требования

Для работы приложения необходимо установить зависимости, указанные в файле `requirements.txt`:

```
pandas>=2.0.0
numpy>=1.25.0
scikit-learn>=1.3.0
matplotlib>=3.7.0
seaborn>=0.12.0
streamlit>=1.30.0
joblib>=1.2.0
boruta>=0.3; python_version >= '3.6'
shap>=0.41.0; python_version >= '3.6'
```

### Установка

1. Убедитесь, что установлен Python версии 3.6 или выше.
2. Создайте виртуальное окружение:
   ```bash
   python -m venv venv
   source venv/bin/activate  # Для Windows: venv\Scripts\activate
   ```
3. Установите зависимости:
   ```bash
   pip install -r requirements.txt
   ```
4. Для генерации PDF-отчетов установите LaTeX (например, [TeX Live](https://www.tug.org/texlive/)) и утилиту `latexmk`.

## Использование

1. Запустите приложение:
   ```bash
   streamlit run main.py
   ```
2. Откройте веб-браузер и перейдите по адресу, указанному в терминале (обычно `http://localhost:8501`).
3. В интерфейсе выберите действие через боковую панель:
   - Загрузите датасет или используйте синтетические данные.
   - Выполните анализ данных, обучение моделей, предсказания или генерацию отчетов.
   - Проверьте окружение или запустите юнит-тесты через раздел *Диагностика*.

## Структура проекта

- `main.py`: Основной скрипт с кодом приложения.
- `requirements.txt`: Список зависимостей.
- `training.log`: Лог-файл для записи событий обучения и ошибок.
- `model_*.joblib`: Сохраненные модели (создаются после обучения).
- `report.tex`: LaTeX-файл отчета (создается при генерации PDF).
- `*.csv`, `*.json`: Результаты сравнения моделей, анализа гиперпараметров и тестирования подвыборок.

## Датасет

Приложение ожидает датасет в формате CSV (`POLOMKA.csv`) со следующими столбцами:

| Столбец                     | Описание                                              |
|-----------------------------|-------------------------------------------------------|
| `Type`                      | Категориальная переменная (например, L, M, H)          |
| `Air temperature [K]`       | Температура воздуха в Кельвинах                       |
| `Process temperature [K]`   | Температура процесса в Кельвинах                      |
| `Rotational speed [rpm]`    | Скорость вращения в оборотах в минуту                 |
| `Torque [Nm]`               | Крутящий момент в Ньютон-метрах                       |
| `Tool wear [min]`           | Время износа инструмента в минутах                    |
| `Target`                    | Целевая переменная (0 - нет неисправности, 1 - неисправность) |
| `UDI`, `Product ID`, `Failure Type` | Опциональные столбцы (удаляются при предобработке) |

Если датасет недоступен, используйте опцию генерации синтетических данных в интерфейсе.

## Генерация PDF-отчета

1. Выберите действие *Генерация PDF-отчета* в интерфейсе.
2. Скачайте сгенерированный файл `report.tex`.
3. Скомпилируйте его с помощью `latexmk`:
   ```bash
   latexmk -pdf report.tex
   ```
4. Полученный файл `report.pdf` содержит сравнение моделей, интерпретацию и рекомендации.

## Ограничения и рекомендации

- **Boruta и SHAP**: Эти модули опциональны. Установите их для использования подбора признаков и анализа SHAP-значений:
  ```bash
  pip install boruta shap
  ```
- **Производительность**: Подбор гиперпараметров и стресс-тестирование могут быть ресурсоемкими. Используйте мощное оборудование или ограничьте объем данных.
- **Датасет**: Убедитесь, что загружаемый датасет соответствует ожидаемой структуре. В случае ошибок проверьте логи в `training.log`.
- **LaTeX**: Для генерации PDF-отчетов требуется установленная LaTeX-система.

## Автор

**Комаров Даниил Иванович**

## Лицензия

Проект распространяется под [лицензией MIT](https://opensource.org/licenses/MIT) (если не указано иное).

## Контакты

Для вопросов и предложений свяжитесь через [email или другой способ связи, указанный автором].